#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal.h>

#define RST_PIN 9
#define SS_PIN 10

MFRC522 mfrc522(SS_PIN, RST_PIN);

// LCD conectado en pines RS, E, D4, D5, D6, D7
LiquidCrystal lcd(7, 8, 5, 4, 3, 2);

// Lista de UIDs permitidos
String tarjetasPermitidas[] = {
  "027DB8DEB6E000",
  "E789B56B",
  "9F3D8CE6"
};

bool esValida(String uid) {
  for (int i = 0; i < sizeof(tarjetasPermitidas) / sizeof(tarjetasPermitidas[0]); i++) {
    if (tarjetasPermitidas[i] == uid) return true;
  }
  return false;
}

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  lcd.begin(16, 2);
  lcd.print("Listo para leer");
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) return;

  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    uid += String(mfrc522.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();

  lcd.clear();
  if (esValida(uid)) {
    Serial.println(uid);             // ✅ Solo UID para el backend
    lcd.print("Acceso permitido");   // ✅ Solo en LCD
  } else {
    lcd.print("Acceso denegado");    // ✅ Solo en LCD
    // No enviar "denegado" al backend, él se encarga
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();

  delay(1500);
  lcd.clear();
  lcd.print("Listo para leer");
}