#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Pines del lector RFID
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);  // Crear instancia del lector

// Configurar LCD I2C (dirección común: 0x27 o 0x3F, cambia si es necesario)
LiquidCrystal_I2C lcd(0x27, 16, 2);  // 16 columnas y 2 filas

// Lista de tarjetas autorizadas (UIDs en MAYÚSCULAS)
String tarjetasPermitidas[] = {
  "E789B56B",
  "9F3D8CE6",
  "027DB8DEB6E000",
  "08DE4B81",
  "A779C86D",
};

// Función para verificar si un UID está en la lista
bool esValida(String uid) {
  for (int i = 0; i < sizeof(tarjetasPermitidas) / sizeof(tarjetasPermitidas[0]); i++) {
    if (tarjetasPermitidas[i] == uid) {
      return true;
    }
  }
  return false;
}

void setup() {
  Serial.begin(9600);     // Comunicación serial
  SPI.begin();            // Iniciar bus SPI
  mfrc522.PCD_Init();     // Iniciar el lector RFID

  lcd.init();             // Iniciar la pantalla LCD
  lcd.backlight();        // Encender la luz de fondo
  lcd.setCursor(0, 0);
  lcd.print("Esperando tarjeta");
  
  Serial.println("Listo para leer tarjetas...");
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  // Leer UID
  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    uid += String(mfrc522.uid.uidByte[i], HEX);
  }

  uid.toUpperCase(); // Convertir a mayúsculas

  lcd.clear();
  lcd.setCursor(0, 0);
  
  if (esValida(uid)) {       // Enviar al puerto serial
    lcd.print("Acceso permitido");
    lcd.setCursor(0, 1);
  } else {
    Serial.println("TARJETA NO AUTORIZADA");
    lcd.print("Acceso denegado");
    lcd.setCursor(0, 1);
  }

  delay(1500); // Esperar antes de leer otra
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Esperando tarjeta");
}
